#pragma once

#include "IMediaStream.h"
#include "IRtcDataChannel.h"

#include "RtcConfiguration.h"
#include "RtcSessionDescription.h"
#include "RtcOfferOptions.h"
#include "RtcStatsReport.h"
#include "RtcIdentityAssertion.h"
#include "RtcIceCandidate.h"

WEBRTCNET_START

public enum class RtcGatheringState
{
	///The object was just created, and no networking has occurred yet.
	New,

	///The ICE engine is in the process of gathering candidates for this RTCPeerConnection.
	Gathering,

	///The ICE engine has completed gathering.
	Complete
};

public enum class RtcIceConnectionState
{
	///The ICE Agent is gathering addresses and / or waiting 
	///for remote candidates to be supplied.
	New,

	///The ICE Agent has received remote candidates on at least one component, 
	///and is checking candidate pairs but has not yet found a connection.
	///In addition to checking, it may also still be gathering.
	Checking,

	///The ICE Agent has found a usable connection for all components but is 
	///still checking other candidate pairs to see if there is a better 
	///connection.It may also still be gathering.
	Connected,

	///The ICE Agent has finished gathering and checking and found a connection for all components.
	Completed,

	///The ICE Agent is finished checking all candidate pairs and failed to find a connection for at least one component.
	Failed,

	///Liveness checks have failed for one or more components.
	///This is more aggressive than failed, and may trigger 
	///intermittently(and resolve itself without action) on a flaky network.
	Disconnected,

	///The ICE Agent has shut down and is no longer responding to STUN requests.
	Closed
};

public enum class RtcSignalingState
{
	/// There is no offer­answer exchange in progress. 
	/// This is also the initial state in which case the local and remote descriptions are empty.
	Stable,

	/// A local description, of type "offer", has been successfully applied.
	HaveLocalOffer,

	/// A remote description, of type "offer", has been successfully applied.
	HaveRemoteOffer,

	/// A remote description of type "offer" has been successfully applied and a 
	/// local description of type "pranswer" has been successfully applied
	HaveLocalPrAnswer,

	/// A local description of type "offer" has been successfully applied 
	/// and a remote description of type "pranswer" has been successfully applied.
	HaveRemotePrAnswer,

	/// The connection is closed.
	Closed
};

/// <Summary>
/// A .Net implementation of the WebRTC RTCPeerConnection Interface 
/// <seealso href="http://w3c.github.io/webrtc-pc/#rtcpeerconnection-interface"/>
/// </Summary>
public interface class IRtcPeerConnection
{
	/// The createOffer method generates a blob of SDP that contains an RFC 3264 offer with the supported configurations for the session, 
	/// including descriptions of the local MediaStreams attached to this RTCPeerConnection, the codec/RTP/RTCP options supported 
	/// by this implementation, and any candidates that have been gathered by the ICE Agent. The options parameter may be supplied 
	/// to provide additional control over the offer generated.
	Task<RtcSessionDescription ^> ^ CreateOffer([Optional] RtcOfferOptions ^ options);

	/// Generates an [SDP] answer with the supported configuration for the session that is compatible with the parameters 
	/// in the remote configuration. Like CreateOffer, the returned blob contains descriptions of the local MediaStreams attached 
	/// to this RTCPeerConnection, the codec/RTP/RTCP options negotiated for this session, and any candidates that have been 
	/// gathered by the ICE Agent. The options parameter may be supplied to provide additional control over the generated answer.
	Task<RtcSessionDescription ^> ^ CreateAnswer();

	/// The setLocalDescription() method instructs the RtcPeerConnection to apply the supplied RtcSessionDescription as the local description.
	Task SetLocalDescription(RtcSessionDescription ^ description);

	/// The localDescription that was successfully set using setLocalDescription(), 
	/// plus any local candidates that have been generated by the ICE Agent since then.
	/// A null object will be returned if the local description has not yet been set.
	property RtcSessionDescription ^ LocalDescription { RtcSessionDescription ^ get(); }

	/// The setRemoteDescription() method instructs the RTCPeerConnection to apply the supplied RTCSessionDescription as the remote 
	/// offer or answer. This API changes the local media state.
	Task SetRemoteDescription(RtcSessionDescription ^ description);

	/// The remoteDescription that was successfully set using setRemoteDescription(), 
	/// plus any remote candidates that have been supplied via addIceCandidate() since then.
	/// A null object will be returned if the remote description has not yet been set.
	property RtcSessionDescription ^ RemoteDescription { RtcSessionDescription ^ get(); }

	/// The signaling state of the RtcPeerConnection.
	property RtcSignalingState SignalingState { RtcSignalingState get(); }

	/// The updateIce method updates the ICE Agent process of gathering local candidates and pinging remote candidates.
	/// This call may result in a change to the state of the ICE Agent, and may result in a change to media state 
	/// if it results in connectivity being established.
	void UpdateIce(RtcConfiguration ^ configuration);

	/// The addIceCandidate() method provides a remote candidate to the ICE Agent. 
	/// In addition to being added to the remote description, connectivity checks will be sent to the new candidates 
	/// as long as the ICE Transports setting is not set to none. This call will result in a change to the connection 
	/// state of the ICE Agent, and may result in a change to media state if it results in different connectivity being established.
	Task AddIceCandidate(RtcIceCandidate ^ candidate);

	/// The gathering state of the RtcPeerConnection ICE Agent.
	property RtcGatheringState IceGatheringState { RtcGatheringState get(); }

	/// The ICE connection state of the RtcPeerConnection ICE Agent.
	property RtcIceConnectionState IceConnectionState { RtcIceConnectionState get(); }

	/// This attribute indicates whether the remote peer is able to accept trickled ICE candidates [TRICKLE-ICE]. 
	/// The value is determined based on whether a remote description indicates support for trickle ICE, as defined in 
	/// Section 4.1.9 of [RTCWEB-JSEP]. Prior to the completion of setRemoteDescription, this value is null.
	property Boolean CanTrickleIceCandidates { Boolean get(); }

	/// Returns a RtcConfiguration object representing the current configuration of this RtcPeerConnection object.
	RtcConfiguration ^ GetConfiguration();

	/// Returns a sequence of MediaStream objects representing the streams that are currently sent with this RtcPeerConnection object.
	IEnumerable<IMediaStream ^> ^ GetLocalStreams();

	/// Returns a sequence of MediaStream objects representing the streams that are currently received with this RTCPeerConnection object.
	IEnumerable<IMediaStream ^> ^ GetRemoteStreams();

	/// If a MediaStream object, with an id equal to streamId, exists in this RTCPeerConnection object's stream sets 
	/// (local streams set or remote streams set), then the getStreamById() method must return that MediaStream object. 
	/// The method must return null if no stream matches the streamId argument.
	IMediaStream ^ GetStreamById(String ^ streamId);

	/// Adds a new stream to the RTCPeerConnection.
	void AddStream(IMediaStream ^ stream);

	/// Removes the given stream from the RTCPeerConnection.
	void RemoveStream(IMediaStream ^ stream);

	/// Destroys the RTCPeerConnection ICE Agent, abruptly ending any active ICE processing and any active streaming, 
	/// and releasing any relevant resources (e.g. TURN permissions). 
	/// Sets the SignalingState to Closed.
	void Close();

	/// Session negotiation needs to be done at some point in the near future.
	event EventHandler ^ OnNegotiationNeeded;


	/// A new RtcIceCandidate is made available.
	event EventHandler<RtcIceCandidate ^> ^ OnIceCandidate;

	/// The RtcPeerConnection signalingState has changed. 
	/// This state change is the result of either setLocalDescription() or setRemoteDescription() being invoked.
	event EventHandler ^ OnSignalingStateChange;

	/// A new stream has been added to the remote streams set.
	/// It is called any time a MediaStream is added by the remote peer. This will be fired only as a 
	/// result of setRemoteDescription. Onnaddstream happens as early as possible after the setRemoteDescription.
	/// This callback does not wait for a given media stream to be accepted or rejected via SDP negotiation.
	event EventHandler<IMediaStream ^> ^ OnAddStream;

	/// A stream has been removed from the remote streams set.
	/// It is called any time a MediaStream is removed by the remote peer. This will be fired only as a result of setRemoteDescription.
	event EventHandler<IMediaStream ^> ^ OnRemoveStream;

	/// The RtcPeerConnection ice connection state has changed.
	event EventHandler ^ OnIceConnectionStateChange;

	/// The RtcPeerConnection ice gathering state has changed.
	event EventHandler ^ OnGatheringStateChange;

#pragma region 5.1 Data Channel - RtcPeerConnection Interface Extensions
	/// Creates a new RTCDataChannel object with the given label. 
	/// The RTCDataChannelInit dictionary can be used to configure properties of the underlying channel such as data reliability.
	IRtcDataChannel ^ CreateDataChannel(String ^ label, [Optional] RtcDataChannelInit dataChannelDict);

	/// A new RTCDataChannel is dispatched to the script in response to the other peer creating a channel.
	event EventHandler<IRtcDataChannel ^> ^ OnDataChannel;
#pragma endregion

#pragma region 8.2 Statistics - RtcPeerConnection Interface Extensions
	Task<RtcStatsReport ^> ^ GetStats([Optional] IMediaStreamTrack ^ selector);
#pragma endregion

#pragma region 9.5 Identity - RtcPeerConnection Interface Extensions
	/// Sets the identity provider to be used for a given RTCPeerConnection object. 
	/// Applications need not make this call; if the browser is already configured for an IdP, then that configured IdP will be used to get an assertion.
	void SetIdentityProvider(String ^ provider, [Optional] String ^ protocol, [Optional] String ^ username);

	/// Initiates the process of obtaining an identity assertion. Applications need not make this call. 
	/// It is merely intended to allow them to start the process of obtaining identity assertions before a call is initiated. 
	/// If an identity is needed, either because the browser has been configured with a default identity provider or because the 
	/// setIdentityProvider() method was called, then an identity will be automatically requested when an offer or answer is created.
	Task<String ^> ^ GetIdentityAssertion();

	/// Contains the peer identity assertion information if an identity assertion was provided and verified. 
	/// Once this value is set to a non-null value, it cannot change.
	property Task<RtcIdentityAssertion ^> ^ PeerIdentity 
	{ 
		Task<RtcIdentityAssertion ^> ^ get(); 
	}


	property String ^ IdpLoginUrl { String ^ get(); }
#pragma endregion
};

WEBRTCNET_END
